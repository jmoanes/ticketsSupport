from django.http import HttpResponse
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from django.utils import timezone
from datetime import datetime, timedelta
import io
import xlsxwriter
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT

from .models import Ticket, UserProfile


def export_tickets_pdf(request):
    """
    Export tickets to PDF
    """
    if not request.user.profile.is_it_staff:
        return HttpResponse('Unauthorized', status=403)
    
    # Get filter parameters
    status_filter = request.GET.get('status')
    priority_filter = request.GET.get('priority')
    category_filter = request.GET.get('category')
    date_from = request.GET.get('date_from')
    date_to = request.GET.get('date_to')
    
    # Build query
    tickets = Ticket.objects.all()
    
    if status_filter:
        tickets = tickets.filter(status=status_filter)
    if priority_filter:
        tickets = tickets.filter(priority=priority_filter)
    if category_filter:
        tickets = tickets.filter(category=category_filter)
    if date_from:
        tickets = tickets.filter(created_at__date__gte=date_from)
    if date_to:
        tickets = tickets.filter(created_at__date__lte=date_to)
    
    # Create PDF
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
    
    # Styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=12,
        spaceAfter=12,
        textColor=colors.darkblue
    )
    
    # Content
    story = []
    
    # Title
    story.append(Paragraph("IT Support System - Tickets Report", title_style))
    story.append(Spacer(1, 12))
    
    # Report info
    report_date = timezone.now().strftime('%Y-%m-%d %H:%M')
    story.append(Paragraph(f"Generated on: {report_date}", styles['Normal']))
    story.append(Paragraph(f"Generated by: {request.user.get_full_name() or request.user.username}", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Summary
    total_tickets = tickets.count()
    open_tickets = tickets.filter(status='open').count()
    in_progress_tickets = tickets.filter(status='in_progress').count()
    resolved_tickets = tickets.filter(status='resolved').count()
    escalated_tickets = tickets.filter(status='escalated').count()
    
    story.append(Paragraph("Summary", heading_style))
    summary_data = [
        ['Total Tickets', str(total_tickets)],
        ['Open', str(open_tickets)],
        ['In Progress', str(in_progress_tickets)],
        ['Resolved', str(resolved_tickets)],
        ['Escalated', str(escalated_tickets)]
    ]
    
    summary_table = Table(summary_data, colWidths=[2*inch, 1*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(summary_table)
    story.append(Spacer(1, 20))
    
    # Tickets table
    story.append(Paragraph("Tickets Details", heading_style))
    
    # Table headers
    table_data = [['Ticket ID', 'Title', 'Status', 'Priority', 'Category', 'Created By', 'Assigned To', 'Created Date']]
    
    # Add ticket data
    for ticket in tickets[:100]:  # Limit to 100 tickets for performance
        table_data.append([
            ticket.ticket_id,
            ticket.title[:30] + '...' if len(ticket.title) > 30 else ticket.title,
            ticket.get_status_display(),
            ticket.get_priority_display(),
            ticket.get_category_display(),
            ticket.created_by.get_full_name() or ticket.created_by.username,
            ticket.assigned_to.get_full_name() if ticket.assigned_to else 'Unassigned',
            ticket.created_at.strftime('%Y-%m-%d')
        ])
    
    # Create table
    tickets_table = Table(table_data, colWidths=[1*inch, 2*inch, 0.8*inch, 0.8*inch, 1*inch, 1.2*inch, 1.2*inch, 1*inch])
    tickets_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('FONTSIZE', (0, 1), (-1, -1), 7),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ]))
    
    story.append(tickets_table)
    
    # Build PDF
    doc.build(story)
    buffer.seek(0)
    
    # Create response
    response = HttpResponse(buffer.getvalue(), content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="tickets_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf"'
    
    return response


def export_tickets_excel(request):
    """
    Export tickets to Excel
    """
    if not request.user.profile.is_it_staff:
        return HttpResponse('Unauthorized', status=403)
    
    # Get filter parameters
    status_filter = request.GET.get('status')
    priority_filter = request.GET.get('priority')
    category_filter = request.GET.get('category')
    date_from = request.GET.get('date_from')
    date_to = request.GET.get('date_to')
    
    # Build query
    tickets = Ticket.objects.all()
    
    if status_filter:
        tickets = tickets.filter(status=status_filter)
    if priority_filter:
        tickets = tickets.filter(priority=priority_filter)
    if category_filter:
        tickets = tickets.filter(category=category_filter)
    if date_from:
        tickets = tickets.filter(created_at__date__gte=date_from)
    if date_to:
        tickets = tickets.filter(created_at__date__lte=date_to)
    
    # Create Excel file
    buffer = io.BytesIO()
    workbook = xlsxwriter.Workbook(buffer)
    
    # Define formats
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'valign': 'top',
        'fg_color': '#D7E4BC',
        'border': 1
    })
    
    cell_format = workbook.add_format({
        'text_wrap': True,
        'valign': 'top',
        'border': 1
    })
    
    date_format = workbook.add_format({
        'num_format': 'yyyy-mm-dd',
        'border': 1
    })
    
    # Summary sheet
    summary_sheet = workbook.add_worksheet('Summary')
    
    # Summary data
    total_tickets = tickets.count()
    open_tickets = tickets.filter(status='open').count()
    in_progress_tickets = tickets.filter(status='in_progress').count()
    resolved_tickets = tickets.filter(status='resolved').count()
    escalated_tickets = tickets.filter(status='escalated').count()
    
    summary_data = [
        ['Metric', 'Count'],
        ['Total Tickets', total_tickets],
        ['Open', open_tickets],
        ['In Progress', in_progress_tickets],
        ['Resolved', resolved_tickets],
        ['Escalated', escalated_tickets]
    ]
    
    # Write summary data
    for row_num, row_data in enumerate(summary_data):
        for col_num, cell_data in enumerate(row_data):
            if row_num == 0:  # Header row
                summary_sheet.write(row_num, col_num, cell_data, header_format)
            else:
                summary_sheet.write(row_num, col_num, cell_data, cell_format)
    
    # Set column widths
    summary_sheet.set_column('A:A', 15)
    summary_sheet.set_column('B:B', 10)
    
    # Tickets sheet
    tickets_sheet = workbook.add_worksheet('Tickets')
    
    # Headers
    headers = [
        'Ticket ID', 'Title', 'Description', 'Status', 'Priority', 'Category',
        'Created By', 'Assigned To', 'Created Date', 'Updated Date', 'Deadline',
        'Resolved Date', 'Escalated To'
    ]
    
    # Write headers
    for col_num, header in enumerate(headers):
        tickets_sheet.write(0, col_num, header, header_format)
    
    # Write ticket data
    for row_num, ticket in enumerate(tickets, 1):
        row_data = [
            ticket.ticket_id,
            ticket.title,
            ticket.description,
            ticket.get_status_display(),
            ticket.get_priority_display(),
            ticket.get_category_display(),
            ticket.created_by.get_full_name() or ticket.created_by.username,
            ticket.assigned_to.get_full_name() if ticket.assigned_to else 'Unassigned',
            ticket.created_at,
            ticket.updated_at,
            ticket.deadline,
            ticket.resolved_at,
            ticket.escalated_to.get_full_name() if ticket.escalated_to else ''
        ]
        
        for col_num, cell_data in enumerate(row_data):
            if col_num in [8, 9, 10, 11]:  # Date columns
                tickets_sheet.write(row_num, col_num, cell_data, date_format)
            else:
                tickets_sheet.write(row_num, col_num, cell_data, cell_format)
    
    # Set column widths
    column_widths = [12, 25, 40, 12, 10, 15, 15, 15, 12, 12, 12, 12, 15]
    for col_num, width in enumerate(column_widths):
        tickets_sheet.set_column(col_num, col_num, width)
    
    # Analytics sheet
    analytics_sheet = workbook.add_worksheet('Analytics')
    
    # Status distribution
    status_data = [
        ['Status', 'Count', 'Percentage'],
        ['Open', open_tickets, f"{(open_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['In Progress', in_progress_tickets, f"{(in_progress_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['Resolved', resolved_tickets, f"{(resolved_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['Escalated', escalated_tickets, f"{(escalated_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"]
    ]
    
    # Write status data
    for row_num, row_data in enumerate(status_data):
        for col_num, cell_data in enumerate(row_data):
            if row_num == 0:  # Header row
                analytics_sheet.write(row_num, col_num, cell_data, header_format)
            else:
                analytics_sheet.write(row_num, col_num, cell_data, cell_format)
    
    # Set column widths
    analytics_sheet.set_column('A:A', 15)
    analytics_sheet.set_column('B:B', 10)
    analytics_sheet.set_column('C:C', 12)
    
    # Close workbook
    workbook.close()
    buffer.seek(0)
    
    # Create response
    response = HttpResponse(buffer.getvalue(), content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = f'attachment; filename="tickets_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx"'
    
    return response


def export_analytics_pdf(request):
    """
    Export analytics to PDF
    """
    if not request.user.profile.is_it_staff:
        return HttpResponse('Unauthorized', status=403)
    
    # Get analytics data
    tickets = Ticket.objects.all()
    
    # Calculate metrics
    total_tickets = tickets.count()
    open_tickets = tickets.filter(status='open').count()
    in_progress_tickets = tickets.filter(status='in_progress').count()
    resolved_tickets = tickets.filter(status='resolved').count()
    escalated_tickets = tickets.filter(status='escalated').count()
    
    high_priority = tickets.filter(priority='high').count()
    medium_priority = tickets.filter(priority='medium').count()
    low_priority = tickets.filter(priority='low').count()
    urgent_priority = tickets.filter(priority='urgent').count()
    
    # Category breakdown
    categories = {}
    for choice in Ticket.CATEGORY_CHOICES:
        categories[choice[1]] = tickets.filter(category=choice[0]).count()
    
    # Create PDF
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
    
    # Styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=12,
        spaceAfter=12,
        textColor=colors.darkblue
    )
    
    # Content
    story = []
    
    # Title
    story.append(Paragraph("IT Support System - Analytics Report", title_style))
    story.append(Spacer(1, 12))
    
    # Report info
    report_date = timezone.now().strftime('%Y-%m-%d %H:%M')
    story.append(Paragraph(f"Generated on: {report_date}", styles['Normal']))
    story.append(Paragraph(f"Generated by: {request.user.get_full_name() or request.user.username}", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Status Distribution
    story.append(Paragraph("Status Distribution", heading_style))
    status_data = [
        ['Status', 'Count', 'Percentage'],
        ['Open', str(open_tickets), f"{(open_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['In Progress', str(in_progress_tickets), f"{(in_progress_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['Resolved', str(resolved_tickets), f"{(resolved_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['Escalated', str(escalated_tickets), f"{(escalated_tickets/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"]
    ]
    
    status_table = Table(status_data, colWidths=[2*inch, 1*inch, 1*inch])
    status_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(status_table)
    story.append(Spacer(1, 20))
    
    # Priority Distribution
    story.append(Paragraph("Priority Distribution", heading_style))
    priority_data = [
        ['Priority', 'Count', 'Percentage'],
        ['Urgent', str(urgent_priority), f"{(urgent_priority/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['High', str(high_priority), f"{(high_priority/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['Medium', str(medium_priority), f"{(medium_priority/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"],
        ['Low', str(low_priority), f"{(low_priority/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"]
    ]
    
    priority_table = Table(priority_data, colWidths=[2*inch, 1*inch, 1*inch])
    priority_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(priority_table)
    story.append(Spacer(1, 20))
    
    # Category Distribution
    story.append(Paragraph("Category Distribution", heading_style))
    category_data = [['Category', 'Count', 'Percentage']]
    for category_name, count in categories.items():
        percentage = f"{(count/total_tickets*100):.1f}%" if total_tickets > 0 else "0%"
        category_data.append([category_name, str(count), percentage])
    
    category_table = Table(category_data, colWidths=[2*inch, 1*inch, 1*inch])
    category_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(category_table)
    
    # Build PDF
    doc.build(story)
    buffer.seek(0)
    
    # Create response
    response = HttpResponse(buffer.getvalue(), content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="analytics_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf"'
    
    return response


def export_single_ticket_pdf(request, ticket_id):
    """
    Export single ticket to PDF
    """
    from .models import Ticket
    from django.shortcuts import get_object_or_404
    
    ticket = get_object_or_404(Ticket, ticket_id=ticket_id)
    
    # Check permissions
    if not request.user.profile.is_it_staff and ticket.created_by != request.user:
        return HttpResponse('Unauthorized', status=403)
    
    # Create PDF
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
    
    # Styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=12,
        spaceAfter=12,
        textColor=colors.darkblue
    )
    
    # Content
    story = []
    
    # Title
    story.append(Paragraph(f"Ticket Details - {ticket.ticket_id}", title_style))
    story.append(Spacer(1, 12))
    
    # Report info
    report_date = timezone.now().strftime('%Y-%m-%d %H:%M')
    story.append(Paragraph(f"Generated on: {report_date}", styles['Normal']))
    story.append(Paragraph(f"Generated by: {request.user.get_full_name() or request.user.username}", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Ticket Information
    story.append(Paragraph("Ticket Information", heading_style))
    
    ticket_data = [
        ['Field', 'Value'],
        ['Ticket ID', ticket.ticket_id],
        ['Title', ticket.title],
        ['Status', ticket.get_status_display()],
        ['Priority', ticket.get_priority_display()],
        ['Category', ticket.get_category_display()],
        ['Created By', ticket.created_by.get_full_name() or ticket.created_by.username],
        ['Assigned To', ticket.assigned_to.get_full_name() if ticket.assigned_to else 'Unassigned'],
        ['Created Date', ticket.created_at.strftime('%Y-%m-%d %H:%M')],
        ['Updated Date', ticket.updated_at.strftime('%Y-%m-%d %H:%M')],
        ['Deadline', ticket.deadline.strftime('%Y-%m-%d') if ticket.deadline else 'Not set'],
        ['Resolved Date', ticket.resolved_at.strftime('%Y-%m-%d %H:%M') if ticket.resolved_at else 'Not resolved'],
    ]
    
    ticket_table = Table(ticket_data, colWidths=[2*inch, 4*inch])
    ticket_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (1, 0), (1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
    ]))
    
    story.append(ticket_table)
    story.append(Spacer(1, 20))
    
    # Description
    story.append(Paragraph("Description", heading_style))
    story.append(Paragraph(ticket.description, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Comments
    if ticket.comments.exists():
        story.append(Paragraph("Comments", heading_style))
        
        comments_data = [['Author', 'Date', 'Message', 'Internal']]
        for comment in ticket.comments.all():
            comments_data.append([
                comment.author.get_full_name() or comment.author.username,
                comment.created_at.strftime('%Y-%m-%d %H:%M'),
                comment.message[:100] + '...' if len(comment.message) > 100 else comment.message,
                'Yes' if comment.is_internal else 'No'
            ])
        
        comments_table = Table(comments_data, colWidths=[1.5*inch, 1*inch, 3*inch, 0.5*inch])
        comments_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        story.append(comments_table)
    
    # Build PDF
    doc.build(story)
    buffer.seek(0)
    
    # Create response
    response = HttpResponse(buffer.getvalue(), content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="ticket_{ticket.ticket_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf"'
    
    return response
